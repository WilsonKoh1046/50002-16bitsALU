/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [29:0] M_count_d, M_count_q = 1'h0;
  localparam START_state = 6'd0;
  localparam CASEP_ADD_state = 6'd1;
  localparam CASEP_SUBTRACT1_state = 6'd2;
  localparam CASE_OVERFLOW_PPNA_state = 6'd3;
  localparam CASE_AND_state = 6'd4;
  localparam CASE_OR_state = 6'd5;
  localparam CASE_XOR_state = 6'd6;
  localparam CASE_A_state = 6'd7;
  localparam CASE_NOR_state = 6'd8;
  localparam CASE_NAND_state = 6'd9;
  localparam CASE_XNOR_state = 6'd10;
  localparam CASE_SHL_state = 6'd11;
  localparam CASE_SHR_state = 6'd12;
  localparam CASE_SRA_state = 6'd13;
  localparam CASE_MUL_state = 6'd14;
  localparam CASE_CMPEQ_state = 6'd15;
  localparam CASE_CMPLT_state = 6'd16;
  localparam CASE_CMPLE1_state = 6'd17;
  localparam CASE_CMPLE2_state = 6'd18;
  localparam ADDERERROR1_state = 6'd19;
  localparam ADDERERROR2_state = 6'd20;
  localparam ADDERERROR3_state = 6'd21;
  localparam ADDERERROR4_state = 6'd22;
  localparam ADDERERROR5_state = 6'd23;
  localparam ADDERERROR6_state = 6'd24;
  localparam BOOLERROR1_state = 6'd25;
  localparam BOOLERROR2_state = 6'd26;
  localparam BOOLERROR3_state = 6'd27;
  localparam BOOLERROR4_state = 6'd28;
  localparam BOOLERROR5_state = 6'd29;
  localparam BOOLERROR6_state = 6'd30;
  localparam BOOLERROR7_state = 6'd31;
  localparam SHIFTERROR1_state = 6'd32;
  localparam SHIFTERROR2_state = 6'd33;
  localparam SHIFTERROR3_state = 6'd34;
  localparam SHIFTERROR4_state = 6'd35;
  localparam COMPERROR1_state = 6'd36;
  localparam COMPERROR2_state = 6'd37;
  localparam COMPERROR3_state = 6'd38;
  localparam COMPERROR4_state = 6'd39;
  localparam END_state = 6'd40;
  
  reg [5:0] M_state_d, M_state_q = START_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [20-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  reg [5:0] alufn;
  
  reg [15:0] alu;
  
  localparam X = 5'h1c;
  
  reg cmp1;
  
  reg cmp2;
  
  wire [16-1:0] M_alucall_alu;
  wire [1-1:0] M_alucall_z;
  wire [1-1:0] M_alucall_v;
  wire [1-1:0] M_alucall_n;
  wire [1-1:0] M_alucall_overflow;
  reg [16-1:0] M_alucall_a;
  reg [16-1:0] M_alucall_b;
  reg [6-1:0] M_alucall_alufn;
  alu_3 alucall (
    .a(M_alucall_a),
    .b(M_alucall_b),
    .alufn(M_alucall_alufn),
    .alu(M_alucall_alu),
    .z(M_alucall_z),
    .v(M_alucall_v),
    .n(M_alucall_n),
    .overflow(M_alucall_overflow)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_count_d = M_count_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    led[0+7-:8] = 8'h00;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 20'h00000;
    alufn = io_dip[16+0+5-:6];
    M_alucall_alufn = alufn;
    M_alucall_a = 16'h0000;
    M_alucall_b = 16'h0000;
    alu = M_alucall_alu;
    
    case (M_state_q)
      START_state: begin
        M_count_d = 1'h0;
        if (io_dip[16+7+0-:1]) begin
          M_state_d = CASEP_ADD_state;
        end
        M_seg_values[15+4-:5] = 5'h05;
        M_seg_values[10+4-:5] = 5'h05;
        M_seg_values[5+4-:5] = 5'h12;
        M_seg_values[0+4-:5] = 5'h1c;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
      end
      CASEP_ADD_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h00;
        M_alucall_a = 16'h0005;
        M_alucall_b = 16'h0007;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0a;
        M_seg_values[10+4-:5] = 5'h0d;
        M_seg_values[5+4-:5] = 5'h0d;
        M_seg_values[0+4-:5] = 5'h01;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h000c) begin
          M_count_d = 1'h0;
          M_state_d = CASEP_SUBTRACT1_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h000c) begin
              M_count_d = 1'h0;
              M_state_d = ADDERERROR1_state;
            end
          end
        end
      end
      ADDERERROR1_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0a;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASEP_SUBTRACT1_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end
        end
      end
      CASEP_SUBTRACT1_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h01;
        M_alucall_a = 16'h0006;
        M_alucall_b = 16'h0002;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h05;
        M_seg_values[10+4-:5] = 5'h03;
        M_seg_values[5+4-:5] = 5'h0b;
        M_seg_values[0+4-:5] = 5'h01;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h0004) begin
          M_count_d = 1'h0;
          M_state_d = CASE_OVERFLOW_PPNA_state;
        end else begin
          if (M_count_q[28+0-:1] == 1'h1 && alu != 16'h0004) begin
            M_count_d = 1'h0;
            M_state_d = ADDERERROR2_state;
          end
        end
      end
      ADDERERROR2_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0a;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_OVERFLOW_PPNA_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end
        end
      end
      CASE_OVERFLOW_PPNA_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h00;
        M_alucall_a = 16'h4000;
        M_alucall_b = 16'h4000;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h06;
        M_seg_values[10+4-:5] = 5'h06;
        M_seg_values[5+4-:5] = 5'h10;
        M_seg_values[0+4-:5] = 5'h0a;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[16+7+0-:1] = 1'h1;
        if (M_count_q[28+0-:1] == 1'h1 && M_alucall_overflow == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_AND_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && M_alucall_overflow != 1'h1) begin
              M_count_d = 1'h0;
              M_state_d = ADDERERROR3_state;
            end
          end
        end
      end
      ADDERERROR3_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0a;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_AND_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end
        end
      end
      CASE_AND_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h18;
        M_alucall_a = 50'h3f28cb71571c7;
        M_alucall_b = 1'h0;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0a;
        M_seg_values[10+4-:5] = 5'h10;
        M_seg_values[5+4-:5] = 5'h0d;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 1'h0) begin
          M_count_d = 1'h0;
          M_state_d = CASE_OR_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 1'h0) begin
              M_count_d = 1'h0;
              M_state_d = BOOLERROR1_state;
            end
          end
        end
      end
      BOOLERROR1_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0b;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_OR_state;
        end
      end
      CASE_OR_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h1e;
        M_alucall_a = 16'h0005;
        M_alucall_b = 16'h0003;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h00;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h08;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h0007) begin
          M_count_d = 1'h0;
          M_state_d = CASE_XOR_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'h0007) begin
              M_count_d = 1'h0;
              M_state_d = BOOLERROR2_state;
            end
          end
        end
      end
      BOOLERROR2_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0b;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_XOR_state;
        end
      end
      CASE_XOR_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h16;
        M_alucall_a = 16'h0005;
        M_alucall_b = 16'h0003;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h11;
        M_seg_values[10+4-:5] = 5'h00;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h0006) begin
          M_count_d = 1'h0;
          M_state_d = CASE_A_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'h0006) begin
              M_count_d = 1'h0;
              M_state_d = BOOLERROR3_state;
            end
          end
        end
      end
      BOOLERROR3_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0b;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_A_state;
        end
      end
      CASE_A_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h1a;
        M_alucall_a = 16'h00d4;
        M_alucall_b = 16'h0033;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0a;
        M_seg_values[10+4-:5] = 5'h08;
        M_seg_values[5+4-:5] = 5'h08;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h00d4) begin
          M_count_d = 1'h0;
          M_state_d = CASE_NOR_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'h00d4) begin
              M_count_d = 1'h0;
              M_state_d = BOOLERROR4_state;
            end
          end
        end
      end
      BOOLERROR4_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0b;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_NOR_state;
        end
      end
      CASE_NOR_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h1f;
        M_alucall_a = 16'h0005;
        M_alucall_b = 16'h0003;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h10;
        M_seg_values[10+4-:5] = 5'h00;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'hfff8) begin
          M_count_d = 1'h0;
          M_state_d = CASE_NAND_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'hfff8) begin
              M_count_d = 1'h0;
              M_state_d = BOOLERROR5_state;
            end
          end
        end
      end
      BOOLERROR5_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0b;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_NAND_state;
        end
      end
      CASE_NAND_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h19;
        M_alucall_a = 16'h0005;
        M_alucall_b = 16'h0003;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h10;
        M_seg_values[10+4-:5] = 5'h0a;
        M_seg_values[5+4-:5] = 5'h10;
        M_seg_values[0+4-:5] = 5'h0d;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'hfffe) begin
          M_count_d = 1'h0;
          M_state_d = CASE_XNOR_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'hfffe) begin
              M_count_d = 1'h0;
              M_state_d = BOOLERROR6_state;
            end
          end
        end
      end
      BOOLERROR6_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0b;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_XNOR_state;
        end
      end
      CASE_XNOR_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h17;
        M_alucall_a = 16'h0005;
        M_alucall_b = 16'h0003;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h11;
        M_seg_values[10+4-:5] = 5'h10;
        M_seg_values[5+4-:5] = 5'h00;
        M_seg_values[0+4-:5] = 5'h02;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'hfff9) begin
          M_count_d = 1'h0;
          M_state_d = CASE_SHL_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'hfff9) begin
              M_count_d = 1'h0;
              M_state_d = BOOLERROR7_state;
            end
          end
        end
      end
      BOOLERROR7_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0b;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_SHL_state;
        end
      end
      CASE_SHL_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h20;
        M_alucall_a = 16'h000a;
        M_alucall_b = 16'h0007;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h05;
        M_seg_values[10+4-:5] = 5'h11;
        M_seg_values[5+4-:5] = 5'h04;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h0500) begin
          M_count_d = 1'h0;
          M_state_d = CASE_SHR_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'h0500) begin
              M_count_d = 1'h0;
              M_state_d = SHIFTERROR1_state;
            end
          end
        end
      end
      SHIFTERROR1_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h05;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_SHR_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end
        end
      end
      CASE_SHR_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h21;
        M_alucall_a = 16'h0500;
        M_alucall_b = 16'h0007;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h05;
        M_seg_values[10+4-:5] = 5'h11;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h000a) begin
          M_count_d = 1'h0;
          M_state_d = CASE_SRA_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'h000a) begin
              M_count_d = 1'h0;
              M_state_d = SHIFTERROR2_state;
            end
          end
        end
      end
      SHIFTERROR2_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h05;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_SRA_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end
        end
      end
      CASE_SRA_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h23;
        M_alucall_a = 16'h0500;
        M_alucall_b = 16'h0007;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h05;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h0a;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h000a) begin
          M_count_d = 1'h0;
          M_state_d = CASE_MUL_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'h000a) begin
              M_count_d = 1'h0;
              M_state_d = SHIFTERROR3_state;
            end
          end
        end
      end
      SHIFTERROR3_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h05;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_MUL_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end
        end
      end
      CASE_MUL_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h22;
        M_alucall_a = 4'ha;
        M_alucall_b = 4'ha;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h10;
        M_seg_values[10+4-:5] = 5'h10;
        M_seg_values[5+4-:5] = 5'h03;
        M_seg_values[0+4-:5] = 5'h04;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 7'h64) begin
          M_count_d = 1'h0;
          M_state_d = CASE_CMPEQ_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 7'h64) begin
              M_count_d = 1'h0;
              M_state_d = SHIFTERROR4_state;
            end
          end
        end
      end
      SHIFTERROR4_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h05;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_CMPEQ_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end
        end
      end
      CASE_CMPEQ_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h33;
        M_alucall_a = 16'h00b4;
        M_alucall_b = 16'h00b4;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h00;
        M_seg_values[5+4-:5] = 5'h06;
        M_seg_values[0+4-:5] = 5'h01;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h0001) begin
          M_count_d = 1'h0;
          M_state_d = CASE_CMPLT_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'h0001) begin
              M_count_d = 1'h0;
              M_state_d = COMPERROR1_state;
            end
          end
        end
      end
      COMPERROR1_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0c;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = CASE_CMPLT_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end
        end
      end
      CASE_CMPLT_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h35;
        M_alucall_a = 16'h0001;
        M_alucall_b = 16'h0003;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h00;
        M_seg_values[5+4-:5] = 5'h06;
        M_seg_values[0+4-:5] = 5'h16;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && alu == 16'h0000) begin
          M_count_d = 1'h0;
          M_state_d = CASE_CMPLE1_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && alu != 16'h0000) begin
              M_count_d = 1'h0;
              M_state_d = COMPERROR2_state;
            end
          end
        end
      end
      COMPERROR2_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0c;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = END_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = CASE_CMPLE1_state;
          end
        end
      end
      CASE_CMPLE1_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h37;
        M_alucall_a = 16'h0007;
        M_alucall_b = 16'h0007;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h00;
        M_seg_values[5+4-:5] = 5'h06;
        M_seg_values[0+4-:5] = 5'h1e;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && (alu == 16'h0001)) begin
          M_count_d = 1'h0;
          M_state_d = CASE_CMPLE2_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && !(alu == 16'h0001)) begin
              M_count_d = 1'h0;
              M_state_d = COMPERROR3_state;
            end
          end
        end
      end
      COMPERROR3_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0c;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = END_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = CASE_CMPLE2_state;
          end
        end
      end
      CASE_CMPLE2_state: begin
        io_seg = 8'hff;
        io_sel = 4'hf;
        M_alucall_alufn = 6'h37;
        M_alucall_a = 16'h0005;
        M_alucall_b = 16'h0007;
        alu = M_alucall_alu;
        io_led[8+7-:8] = M_alucall_alu[8+7-:8];
        io_led[0+7-:8] = M_alucall_alu[0+7-:8];
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h00;
        M_seg_values[5+4-:5] = 5'h06;
        M_seg_values[0+4-:5] = 5'h12;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1 && (alu == 16'h0000)) begin
          M_count_d = 1'h0;
          M_state_d = END_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end else begin
            if (M_count_q[28+0-:1] == 1'h1 && !(alu == 16'h0000)) begin
              M_count_d = 1'h0;
              M_state_d = COMPERROR4_state;
            end
          end
        end
      end
      COMPERROR4_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h0c;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = END_state;
        end else begin
          if (io_dip[16+7+0-:1] == 1'h0) begin
            M_count_d = 1'h0;
            M_state_d = END_state;
          end
        end
      end
      END_state: begin
        M_count_d = M_count_q + 1'h1;
        M_seg_values[15+4-:5] = 5'h0e;
        M_seg_values[10+4-:5] = 5'h10;
        M_seg_values[5+4-:5] = 5'h0d;
        M_seg_values[0+4-:5] = 5'h12;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_count_q[28+0-:1] == 1'h1) begin
          M_count_d = 1'h0;
          M_state_d = START_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_count_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_count_q <= M_count_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
